import { MessageContext, VK } from 'vk-io';
import { db } from '../firebase';
import { DateTime } from 'luxon';
import axios from 'axios';
import { eventModeFirstOfAprilChats } from '../config/config';

const collectionPrefix = 'title_logs_';
const openaiApiKey = process.env.OPENAI_API_KEY || '';

const DEFAULT_PROMPT = `–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –æ–¥–∏–Ω –∫–æ—Ä–æ—Ç–∫–∏–π, –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π, –∞–±—Å—É—Ä–¥–Ω—ã–π –∏ —Å–º–µ—à–Ω–æ–π —Ç–∏—Ç—É–ª –¥–ª—è —á–µ–ª–æ–≤–µ–∫–∞.
–ë–µ–∑ —à–∞–±–ª–æ–Ω–æ–≤ –≤—Ä–æ–¥–µ "–ö–æ—Ç –≤ –∫–µ–¥–∞—Ö" –∏–ª–∏ "–õ–æ—Ä–¥ –ü–µ–ª—å–º–µ–Ω–µ–π".
–¢–∏—Ç—É–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–≤–µ–∂–∏–º, —Å—Ç—Ä–∞–Ω–Ω—ã–º, –Ω–æ –∑–≤—É—á–∞—Ç—å –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å –∏–ª–∏ —Ä–∞–Ω–≥.
–¢–æ–ª—å–∫–æ —Å–∞–º —Ç–∏—Ç—É–ª, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π.`;

const RAT_PROMPT = `–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –æ–¥–∏–Ω —Å–º–µ—à–Ω–æ–π, –∞–±—Å—É—Ä–¥–Ω—ã–π –∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–∏—Ç—É–ª –∫—Ä—ã—Å—ã. –¢–∏—Ç—É–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–º (2-3 —Å–ª–æ–≤–∞), –∑–≤—É—á–∞—Ç—å –Ω–µ–ª–µ–ø–æ, —Å—é—Ä—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ –∏–ª–∏ —Å—Ç—Ä–∞–Ω–Ω–æ, –Ω–æ –ø—Ä–∏ —ç—Ç–æ–º –∑–∞–ø–æ–º–∏–Ω–∞—Ç—å—Å—è. 
–ò–∑–±–µ–≥–∞–π —Ñ–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç–µ–π –≤—Ä–æ–¥–µ ‚Äú–ò–º–ø–µ—Ä–∏–∏‚Äù, ‚Äú–î–æ–º–µ–Ω–∞–≤–æ–≤‚Äù –∏ ‚Äú–ú–∞—Ä—à–∞–ª–æ–≤‚Äù. –õ—É—á—à–µ ‚Äî –ö–æ—Ä–æ–ª—å –ö—Ä—ã—Å–µ–ª—å–≤–∞–Ω–∏–∏, –ü—Ä–µ–º–∏—É–º –∫—Ä—ã—Å–∞, –º–∏–∫—Ä–æ-–∫—Ä—ã—Å –∏ —Ç.–ø. 
–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —à–∞–±–ª–æ–Ω ‚Äú–í–µ–ª–∏–∫–∏–π <—á—Ç–æ-—Ç–æ>‚Äù.
–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–æ–≤–æ "–∫—Ä—ã—Å–∞", "–∫—Ä—ã—Å", "–∫—Ä—ã—Å–∏–Ω—ã–π", "–∫—Ä—ã—Å–µ–ª—å–≤–∞–Ω—Å–∫–∏–π" –∏ —Ç.–ø. –°—Ç–∏–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –∏ –º–µ–º–Ω—ã–º, –Ω–µ —Å–∫–∞—Ç—ã–≤–∞—Ç—å—Å—è –≤ —Å—Ç–∞—Ä—ã–µ –Ω–∏–∫–Ω–µ–π–º—ã 2000—Ö.
–ë–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π, –±–µ–∑ –∫–∞–≤—ã—á–µ–∫, —Ç–æ–ª—å–∫–æ —Å–∞–º —Ç–∏—Ç—É–ª. –ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö –∏–ª–∏ –±–∞–Ω–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤.`;

export const generateAITitle = async (isRatMode: boolean): Promise<string> => {
    const prompt = isRatMode ? RAT_PROMPT : DEFAULT_PROMPT;

    const res = await axios.post(
        'https://api.openai.com/v1/chat/completions',
        {
            model: 'gpt-4-turbo',
            messages: [{ role: 'user', content: prompt }],
            max_tokens: 30,
            temperature: 1.3
        },
        {
            headers: {
                Authorization: `Bearer ${openaiApiKey}`,
                'Content-Type': 'application/json'
            }
        }
    );

    return res.data.choices[0].message.content.trim().replace(/^"|"$/g, '');
};

export const handleTitleCommand = async (context: MessageContext, vk: VK) => {
    const chatId = context.chatId?.toString();
    if (!chatId) return;

    const nowInMoscow = DateTime.now().setZone('Europe/Moscow');
    const todayDate = nowInMoscow.toISODate();

    const initiatorId = context.senderId.toString();
    const initiatorInfo = await vk.api.users.get({ user_ids: [initiatorId], lang: 'ru' });
    const initiatorName = initiatorInfo[0].first_name;

    const messageText = context.text?.trim().toLowerCase();
    const commandParts = messageText?.split(' ');
    const subcommand = commandParts?.[2];

    const collectionName = `${collectionPrefix}${chatId}`;
    const userDocRef = db.collection(collectionName).doc(initiatorId);
    const userDoc = await userDocRef.get();

    if (subcommand === '–≤—Å–µ') {
        const logsSnapshot = await db.collection(collectionName)
            .where('lastGeneratedDate', '==', todayDate)
            .get();

        if (logsSnapshot.empty) {
            await context.send('–°–µ–≥–æ–¥–Ω—è –ø–æ–∫–∞ –Ω–∏–∫–æ–º—É –Ω–µ –ø—Ä–∏—Å–≤–æ–µ–Ω —Ç–∏—Ç—É–ª üò¢');
            return;
        }

        let response = 'üéñ –¢–∏—Ç—É–ª—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n';

        for (const doc of logsSnapshot.docs) {
            const userId = doc.id;
            const title = doc.data().lastTitle;

            try {
                const user = await vk.api.users.get({ user_ids: [userId], lang: 'ru' });
                response += `${user[0].first_name}: ${title}\n`;
            } catch (e) {
                response += `id${userId}: ${title}\n`;
            }
        }

        await context.send(response.trim());
        return;
    }

    if (userDoc.exists) {
        const userData = userDoc.data();
        if (userData?.lastGeneratedDate === todayDate && userData.lastTitle) {
            await context.send(`${initiatorName}, —Ç–≤–æ–π —Ç–∏—Ç—É–ª —Å–µ–≥–æ–¥–Ω—è: ${userData.lastTitle}`);
            return;
        }
    }

    let randomTitle = '';
    try {
        const isRatMode = eventModeFirstOfAprilChats.includes(chatId);
        randomTitle = await generateAITitle(isRatMode);
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–∏—Ç—É–ª–∞:', err);
        await context.send('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π —Ç–∏—Ç—É–ª–∞ üß® –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ!');
        return;
    }

    await userDocRef.set({
        lastGeneratedDate: todayDate,
        lastTitle: randomTitle,
    });

    await context.send(`${initiatorName}, —Ç—ã ‚Äî ${randomTitle}.`);
};